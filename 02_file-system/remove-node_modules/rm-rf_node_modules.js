const fs = require('fs').promises;
const path = require('path');

// --- Logic to determine the starting directory ---
let directoryToUse;
const providedPathArgument = process.argv[2];

if (providedPathArgument) {
	directoryToUse = providedPathArgument;
	console.log("Argument provided:", providedPathArgument);
	console.log("Using the directory specified by the user:", directoryToUse);
} else {
	directoryToUse = __dirname;
	console.log("No argument provided.");
	console.log("Using the script's default directory:", directoryToUse);
}

// --- Recursive Directory Processing Function ---
/**
 * Recursively processes a directory, searching for and removing 'node_modules' folders.
 *
 * @param {string} currentDirectoryPath The path of the current directory to process.
 */
async function processDirectory(currentDirectoryPath) {
	console.info(`--> Working in directory: ${currentDirectoryPath}`);
	try {
		const entries = await fs.readdir(currentDirectoryPath, { withFileTypes: true });

		for (const entry of entries) {
			const entryPath = path.join(currentDirectoryPath, entry.name);
			if (entry.isDirectory()) {
				if (entry.name.startsWith('.')) {
					console.log(`---> Skipping hidden directory: ${entryPath}`);
					continue;
				}
				if (entry.name === 'node_modules') {
					// --- Found a node_modules directory, DELETE IT! ---
					console.info(`---> Found node_modules folder: ${entryPath}`);
					console.info(`---> Removing ${entryPath}...`);
					try {
						await fs.rm(entryPath, { recursive: true, force: true });
						console.log(`---> ${entryPath} removed successfully.`);
					} catch (err) {
						console.error(`Error removing ${entryPath}:`, err);
					}
					// --- IMPORTANT: DO NOT make the recursive call *into* the node_modules folder we just deleted (or are trying to delete) ---
					continue;
				} else {
					// --- It's a directory other than 'node_modules', proceed recursively into it ---
					console.info(`---> Entering subdirectory: ${entryPath}`);
					await processDirectory(entryPath);
				}
			} else {
				// console.info(`---> Ignored (not a directory): ${entryPath}`);
			}
		}
	} catch (err) {
		console.error(`Error processing directory ${currentDirectoryPath}:`, err);
	}
}

// --- Start the process ---
(async () => {
	console.log("Starting 'node_modules' cleaning script...");
	try {
		await fs.access(directoryToUse, fs.constants.F_OK);
		console.log(`Starting recursive processing from directory: ${directoryToUse}`);
		await processDirectory(directoryToUse);
		console.log("\n--- Cleaning process completed ---");
	} catch (err) {
		console.error(`Error: The starting directory '${directoryToUse}' does not exist or is not accessible.`);
		console.error(err);
	}
})();
